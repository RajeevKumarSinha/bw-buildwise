const mongoose = require("mongoose")

// Import PipeParameter model
const PipeParameter = require("./parameterModels/pipeParameterModel")

// unique-slug to create autoGeneratedCode
const autoCode = require("unique-slug")

const pipeDataSchema = new mongoose.Schema(
	{
		autoGeneratedProductCode: {
			type: String,
			required: true,
		},
		sizeDisplayText: {
			type: mongoose.Schema.Types.ObjectId,
			ref: "ManufacturerProdRange",
		},
		outerDiameter: {
			type: Number,
			required: true,
		},
		innerDiameter: {
			type: Number,
			required: true,
		},
		unitOfMeasure: {
			type: String,
			enum: ["m", "ft."],
			required: true,
		},
		currency: {
			type: String,
			required: true,
		},
		packSize: {
			type: Number,
			required: true,
		},
		packPrice: {
			type: Number,
			required: true,
		},
		itemCode: {
			type: String,
			required: true,
		},
		UPCCode: {
			required: true,
			type: String,
		},
		priceIssueDate: {
			type: Date,
			required: true,
		},
		roughness: String,
		weight: String,
		co2FootPrint: String,
		notes: String,
	},
	{ strict: false }
)

// Date type in Mongoose can accept dates in various formats, but ISO 8601 is
// a commonly used format. The format for a date and time is
//  "YYYY-MM-DDTHH:MM:SS", where "T" is the separator between the date and
// time, and "HH:MM:SS" represents the hours, minutes, and seconds.

// Use Mongoose middleware to call the function before save, find, and update
pipeDataSchema.pre("save", function (next) {
	// Add dynamic fields to the schema before saving
	this.autoGeneratedProductCode = autoCode()
	// addDynamicFields()
	return next()
})

const PipeData = mongoose.model("PipeData", pipeDataSchema)

module.exports = PipeData
