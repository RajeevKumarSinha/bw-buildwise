"use strict"

// unique-slug to create autoGeneratedCode
const autoCode = require("unique-slug")

// import PipeParameter model
const PipeParameter = require("./parameterModels/pipeParameterModel")

// fetch PipeParameter data with mandatoryField = 'Yes'
const fetchAndFilterPipeParameter = async () => {
	return PipeParameter.find({ mandatoryField: "Yes" })
}

const mongoose = require("mongoose")

const dyncamicFields = async () => {
	const mandatoryPipeParameter = await fetchAndFilterPipeParameter()
	for (const parameter of mandatoryPipeParameter) {
		// console.log(parameter)
		pipeDataSchema.add({
			[parameter.description]: {
				type: parameter.type === "Text" ? String : parameter.type,
			},
		})
	}
}

const pipeDataSchema = new mongoose.Schema(
	{
		autoGeneratedProductCode: {
			type: String,
			required: true,
		},
		sizeDisplayText: {
			type: mongoose.Schema.Types.ObjectId,
			ref: "ManufacturerProdRange",
		},
		outerDiameter: {
			type: Number,
			required: true,
		},
		innerDiameter: {
			type: Number,
			required: true,
		},
		unitOfMeasure: {
			type: String,
			enum: ["m", "ft."],
			required: true,
		},
		currency: {
			type: String,
			required: true,
		},
		packSize: {
			type: Number,
			required: true,
		},
		packPrice: {
			type: Number,
			required: true,
		},
		itemCode: {
			type: String,
			required: true,
		},
		UPCCode: {
			required: true,
			type: String,
		},
		priceIssueDate: {
			type: Date,
			required: true,
		},
		roughness: String,
		weight: String,
		co2FootPrint: String,
		notes: String,
	},
	{ statics: false }
)

dyncamicFields()
pipeDataSchema.pre("save", function (next) {
	// console.log(this, autoCode())
	this.autoGeneratedProductCode = autoCode()
	return next()
})

// Date type in Mongoose can accept dates in various formats, but ISO 8601 is
// a commonly used format. The format for a date and time is
//  "YYYY-MM-DDTHH:MM:SS", where "T" is the separator between the date and
// time, and "HH:MM:SS" represents the hours, minutes, and seconds.

const PipeData = mongoose.model("PipeData", pipeDataSchema)

module.exports = PipeData

// create dyncamicFields in pipeData schema based on the pipeParameter
